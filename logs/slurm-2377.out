 
:: initializing oneAPI environment ...
   slurm_script: BASH_VERSION = 4.4.20(1)-release
   args: Using "$@" for setvars.sh arguments: 
:: advisor -- latest
:: ccl -- latest
:: clck -- latest
:: compiler -- latest
:: dal -- latest
:: debugger -- latest
:: dev-utilities -- latest
:: dnnl -- latest
:: dpcpp-ct -- latest
:: dpl -- latest
:: inspector -- latest
:: ipp -- latest
:: ippcp -- latest
:: ipp -- latest
:: itac -- latest
:: mkl -- latest
:: mpi -- latest
:: tbb -- latest
:: vtune -- latest
:: oneAPI environment initialized ::
 
job start time is Thu Dec 5 11:31:34 -05 2024
+ srun -N1 -n1 --cpu_bind=cores -l --nodelist=gn03 --cpus-per-task=96 singularity exec --nv -B /home/urso -B /scratch --pwd /home/urso/PavicHDR/logs /home/urso/.lico/container/Python.sif bash /home/urso/PavicHDR/test.sh
0: /home/urso/PavicHDR/test.py:48: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
0:   model.load_state_dict(torch.load(f"{args.ckpt}")['state_dict'])
0: >>>>>>>>> Start Testing >>>>>>>>>
0: Load weights from:  /home/urso/PavicHDR/runs/train_2/best_checkpoint.pth
0: 2000
0: cuda:0
0:  0 | PSNR_mu: 50.9954  PSNR_l: 54.8449 | SSIM_mu: 0.9976  SSIM_l: 0.9997 Seconds: 1.0901  GPU: 146.29
0:  1 | PSNR_mu: 45.2395  PSNR_l: 59.0615 | SSIM_mu: 0.9937  SSIM_l: 0.9998 Seconds: 0.0125  GPU: 138.16
0:  2 | PSNR_mu: 50.4595  PSNR_l: 46.2833 | SSIM_mu: 0.9972  SSIM_l: 0.9994 Seconds: 0.0085  GPU: 138.16
0:  3 | PSNR_mu: 42.7604  PSNR_l: 45.4621 | SSIM_mu: 0.9811  SSIM_l: 0.9985 Seconds: 0.0083  GPU: 138.16
0:  4 | PSNR_mu: 42.7539  PSNR_l: 45.3648 | SSIM_mu: 0.9904  SSIM_l: 0.9975 Seconds: 0.1217  GPU: 138.16
0:  5 | PSNR_mu: 42.1371  PSNR_l: 34.6797 | SSIM_mu: 0.9842  SSIM_l: 0.9951 Seconds: 0.0081  GPU: 138.16
0:  6 | PSNR_mu: 39.8424  PSNR_l: 26.9809 | SSIM_mu: 0.9843  SSIM_l: 0.9589 Seconds: 0.0078  GPU: 138.16
0:  7 | PSNR_mu: 36.1552  PSNR_l: 23.2602 | SSIM_mu: 0.9941  SSIM_l: 0.9678 Seconds: 0.0081  GPU: 138.16
0:  8 | PSNR_mu: 42.3466  PSNR_l: 29.3180 | SSIM_mu: 0.9921  SSIM_l: 0.9675 Seconds: 0.0080  GPU: 138.16
0:  9 | PSNR_mu: 36.8058  PSNR_l: 23.7967 | SSIM_mu: 0.9887  SSIM_l: 0.9532 Seconds: 0.0080  GPU: 138.16
0:  10 | PSNR_mu: 45.0723  PSNR_l: 39.2724 | SSIM_mu: 0.9968  SSIM_l: 0.9964 Seconds: 0.0079  GPU: 138.16
0:  11 | PSNR_mu: 50.4907  PSNR_l: 46.3979 | SSIM_mu: 0.9972  SSIM_l: 0.9995 Seconds: 0.0084  GPU: 138.16
0:  12 | PSNR_mu: 52.7420  PSNR_l: 65.7353 | SSIM_mu: 0.9982  SSIM_l: 0.9999 Seconds: 0.0098  GPU: 138.16
0:  13 | PSNR_mu: 42.7410  PSNR_l: 45.2151 | SSIM_mu: 0.9904  SSIM_l: 0.9975 Seconds: 0.0080  GPU: 138.16
0:  14 | PSNR_mu: 44.7568  PSNR_l: 41.0109 | SSIM_mu: 0.9874  SSIM_l: 0.9977 Seconds: 0.0077  GPU: 138.16
0: Average PSNR_mu: 44.3532  PSNR_l: 41.7789
0: Average SSIM_mu: 0.9916  SSIM_l: 0.9886
0: Average time 0.08819940884908041
0: Average GPU Mem 138.70572916666666
0: >>>>>>>>> Finish Testing >>>>>>>>>
+ set +x
job end time is Thu Dec 5 11:32:56 -05 2024
